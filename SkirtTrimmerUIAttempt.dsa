// DAZ Studio version 4.20.0.17 filetype DAZ Script

// Script by TiZ.
//
// TiZ's DAZ scripts are public domain; that applies *only* to the scripts, and
// not to any content that a script is for. Please feel free to derive or learn
// from this script as you wish! <3
//
// About this script specifically:
//
// My first attempt to make this script made use of selection sets, but
// selection sets are inherently volatile. All facet deletions render the
// selection sets invalid; when you do it in the UI, you actually *lose*
// all selection sets. Because of that, I decided not to use selection sets.
// Instead, we now rely on the fact that each skirt length has a consistent
// number of rows when you add the skirt surface and the hem surface together;
// You can select the hem surface and grow it repeatedly to redefine the hem,
// and then shrink it back down to cut it.
//
// We can also make this script work for every skirt length. So you can cut
// long 1 to long 3 to ankle to knee, for example. We mainly need to determine
// how many rows there are, so we know how many rows to take out. Every row of
// the skirt has 192 facets. So we divide the number of facets currently in the
// skirt surface by 192 to know how many rows there are, and hence, our current
// skirt length! It is important to keep in mind that the hem is a separate
// surface from the skirt.
//
// This script will *not* work if there are any additional surfaces between
// the waistband and the bottom of the skirt. If you want to add surfaces for
// special purposes, like decorative trims, do that *after* resizing the skirt.
// However, this script *will* work for any size of the hem surface as long as
// it does exist, and it's at the bottom of the skirt. It relies on the shrink
// behavior for selected facets at the edge of a mesh, and we don't have to
// hard-code any particular hem size. So custom hem sizes will be preserved.
//
// This script will try to detect if any of its assumptions are false, and exit
// without changing anything. It will pop up a message box for any of these
// error cases.
//
// This approach also makes life easier for the Circle Skirt variation; it
// changes the shape so we have to delete different numbers of rows to hit
// an equivalent length. If you have the free Circle Skirt add-on, you'll
// notice that all the skirt lengths in the JSON dictionary below are
// different than in the regular version.

// We'll use a JSON dictionary to hold all the target lengths.
const totalSkirtLengths = {
	"Long 1":   111,
	"Long 2":   104,
	"Long 3":   99,
	"Ankle":    89,
	"Tea":      81,
	"Knee":     61,
	"Cocktail": 49,
	"Mini":     33
}

const rowFacets = 192;

// Include Daz's sample functions.
var dir_self = new DzDir(new DzFileInfo(getScriptFileName()).path());
include(dir_self.filePath("DazSampleFns.dsa"));

function error (text) {
	MessageBox.critical(text, qsTr("Skirt Trimmer"), qsTr("&Ok"));
}

// We can use a length specifier string here, or a number
// of rows with the actual main function.
function cutSkirtToLength (targetLength) {
	cutSkirtToRows(totalSkirtLengths[targetLength]);
}

// The main logic of skirt trimming.
function cutSkirtToRows (targetRows) {
	// We need this variable to be in this scope.
	var node;

	// First, we gotta get the node we're working with. Usually that will be
	// the primary selection, but if this script is being executed as post-load
	// data, we need to use the node we just loaded.
	if (typeof(DataItem) != "undefined" &&
		DataItem.inherits("DzElementPostLoadFileData")) {
		// Got it. That is the node we want to use for the trim.
		node = DataItem.getOwner();
	} else node = Scene.getPrimarySelection();
	if (!node) {
		error("Please select Sunfire's DForce skirt.");
		return;
	}

	// Let's get the shape and check its materials.
	var obj = node.getObject();
	if (!obj) {
		error("Node has no object; not sure what broke.");
		return;
	}
	var shape = obj.getCurrentShape();
	if (!shape) {
		error("Node has no shape; not sure what broke.");
		return;
	}

	// Make sure the materials we need exist.
	var matSkirtIdx = shape.findMaterialIndex("Skirt");
	var matHemIdx = shape.findMaterialIndex("Bottom_Hem");
	if (matSkirtIdx == -1 || matHemIdx == -1) {
		error("Missing skirt and hem surfaces. " +
		 "Did you select Sunfire's DForce Skirt?");
		return;
	}

	// Get the geometry and make sure it's a facet mesh.
	//var geom = shape.getCurrentGeometry(DzShape.BaseGeometry);
	var geom = shape.getGeometry();
	if (!geom) {
		error("Node has no working geometry; not sure what broke.");
		return;
	} else if (!geom.inherits("DzFacetMesh")) {
		error("Node's working geometry is not a facet mesh; " +
		 "not sure what broke.");
		return;
	}

	// Make sure the materials match the assumptions our script is based on;
	// primarily that each row has 192 facets.
	var matSkirtGrp = geom.getMaterialGroup(matSkirtIdx);
	var matHemGrp = geom.getMaterialGroup(matHemIdx);
	if ((matSkirtGrp.count() + matHemGrp.count()) % rowFacets != 0) {
		error("The skirt's surfaces are the wrong size. " +
		 "Did you select Sunfire's DForce Skirt?");
		return;
	}

	// Let's figure out how many rows are where and how many will be removed.
	var currentSkirtLength =
		(matSkirtGrp.count() + matHemGrp.count()) / rowFacets;
	var currentHemLength = matHemGrp.count() / rowFacets;
	var rowsToRemove = currentSkirtLength - targetRows;

	// One last check: make sure the current skirt length > target length.
	if (rowsToRemove < 0) {
		error("The skirt is shorter than the desired length.");
		return;
	} else if (rowsToRemove == 0) { return; }  // Do nothing and exit quietly.

	// Okay, time to get started. We have to do everything via scripting
	// actions. So let's bring up the action manager and find our actions.
	var actionMgr = MainWindow.getActionMgr();
	var action = actionMgr.findAction("DzFacetSelGrowAction");
	if (!action) {
		error("Can't find the facet deletion action.");
		return;
	}
	var action = actionMgr.findAction("DzFacetSelShrinkAction");
	if (!action) {
		error("Can't find the facet deletion action.");
		return;
	}
	var action = actionMgr.findAction("DzPGDeleteSelectedFacetsAction");
	if (!action) {
		error("Can't find the facet deletion action.");
		return;
	}
	var action = actionMgr.findAction("DzPGDeleteSelectedFacetsAction");
	if (!action) {
		error("Can't find the facet deletion action.");
		return;
	}

	// So I guess we'd better get started.
	mesh.beginEdit();

	// Select the hem surface. We recreate the material group from the copied
	// mesh just to be safe.
	mesh.selectFacets(mesh.getMaterialGroup(matHemIdx));

	// Grow the selection.
	for (var i = 0; i < rowsToRemove; i++) mesh.growFacetSelection();

	// Assign selection to hem surface.
	mesh.addSelectedFacetsToMaterialGroup(matHemIdx);

	// Shrink the selection.
	for (var i = 0; i < currentHemLength; i++) mesh.shrinkFacetSelection();

	// Now, we *cheat*, and simply activate the UI item that deletes
	// selected facets. There does not seem to be any other sane way
	// to make this change.
	/*var actionMgr = MainWindow.getActionMgr();
	var action = actionMgr.findAction("DzPGDeleteSelectedFacetsAction");
	if (!action) {
		error("Can't find the facet deletion action.");
		return;
	}*/

	// Delete those facets. Unfortunately, none of these methods work.
	//mesh.removeSelectedFacets();
	//mesh.removeFacets(mesh.getSelectedFacets(), true);

	// This has the same result as the below.
	mesh.getSelectedFacets().sort().reverse().forEach(function(idx) {
		mesh.removeFacet(idx);
	});

	// Create a temporary face group for the deletion.
	/*mesh.createFaceGroup("ToCut");
	mesh.addSelectedFacetsToGroup("ToCut");
	mesh.removeFacets(mesh.findFaceGroup("ToCut"), true);
	var result = mesh.removeFaceGroup("ToCut", "Skirt");
	if (result > 0x0) {
		error(getErrorMessage(result));
		return;
	}*/

	// This method doesn't work. When loading a saved scene, the skirt is
	// unmodified.
	/*mesh.hideSelectedFacets();
	mesh.removeHiddenFacets();*/

	// Get rid of unused verts.
	mesh.removeUnusedVertices(true);

	// All done!
	mesh.deselectAllFacets();
	mesh.finishEdit();

	// Now that we've cut off a bunch of facets, let's make a copy of the
	// modified UV sets to save with the scene.
	/*var numUVSets = mesh.getNumUVSets();
	var uvSets = Array(numUVSets);
	for (var i = 0; i < numUVSets; i++) {
		uvSets[i] = mesh.getUVSet(i).makeCopy();
	}
	mesh.removeAllUVSets();
	for (var i = 0; i < numUVSets; i++) {
		mesh.addUVSet(uvSets[i]);
	}*/

	shape.setFacetMesh(mesh);
	node.update();
	node.finalize();
	node.modifyAsset();

	// Let's try some other stuff that might make it saveable.
	/*shape.update();
	shape.updateFacetGeom();
	shape.invalidateGeomCaches();
	shape.invalidateWorkingMesh();*/
}
